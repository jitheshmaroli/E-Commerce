<%- include('../includes/userHead.ejs') %>
<%- include('../includes/userHeader.ejs') %>

  <section class="product-section">
    <div class="container">
        <div class="row">
            <% if (products && products.length > 0) { %>
              <div id="productData"   data-current-page="<%= currentPage %>" data-products-per-page="<%= productsPerPage %>" data-total-products="<%= totalProducts %>" hidden></div>
              <% products.forEach(product => { %>
                    <div class="col-lg-3 col-md-6 col-sm-12">
                        <div class="product-card <%= product.stock === 0 ? 'out-of-stock' : '' %>" data-product="<%= product._id %>">
                            <div class="product-image">
                              <a href="/product-details/<%= product._id %>">
                                <img src="/uploads/<%= product.photos[0].filename %>" alt="Product Image">
                              </a>
                              <div class="product-category">
                                <%= product.category.categoryName %>
                              </div>
                              <div class="product-wishlist">
                                <a href="#" class="move-to-wishlist">
                                  <% const isInWishlist = wishlistProducts.find(item => item._id.toString() === product._id.toString()); %>
                                  <% if (isInWishlist) { %>
                                      <i class="fa fa-heart" style="color: black;"></i>
                                  <% } else { %>
                                      <i class="fa fa-heart" style="color:rgb(221, 218, 218);"></i>
                                  <% } %>
                              </a>
                              </div>
                                <% if (product.stock === 0) { %>
                                  <div class="out-of-stock-message">Out of Stock</div>
                                <% } %>
                            </div>
                            <div class="product-details">
                                <h3 class="product-name"><%= product.name %></h3>
                                <div class="rating">
                                  <% for (let i = 1; i <= 5; i++) { %>
                                    <% if (i <= product.averageRating) { %>
                                      <i class="fas fa-star"></i>
                                    <% } else { %>
                                      <i class="far fa-star"></i>
                                    <% } %>
                                  <% } %>
                                </div>
                                <div class="product-price">
                                  <% if (product.offer && product.price !== product.currentPrice) { %>
                                    <p class="price">
                                      <span class="price" style="text-decoration: line-through;">₹<%= product.price.toFixed(2) %></span>
                                      <span class="current-price">₹<%= product.currentPrice %></span>
                                      <i class="fas fa-info-circle offer-icon" data-bs-toggle="modal" data-bs-target="#offerModal"></i>
                                    </p>
                                     <!-- Modal -->
                                <div class="modal fade" id="offerModal" tabindex="-1" aria-labelledby="offerModalLabel" aria-hidden="true">
                                  <div class="modal-dialog">
                                    <div class="modal-content">
                                      <div class="modal-header">
                                        <h5 class="modal-title" id="offerModalLabel">Offer Details</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                      </div>
                                      <div class="modal-body">
                                        <p><%= product.offer.name %></p>
                                        <p><%= product.offer.description %></p>
                                      </div>
                                      <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                                  <% } else { %>
                                    <p class="price">₹<%= product.price.toFixed(2) %></p>
                                  <% } %>
                                </div>
                                  <div class="product-actions">
                                    <a href="#" class="btn btn-add-to-cart add-to-cart" data-product-id="<%= product._id %>">Add to Cart</a>
                                    <a href="/checkout/<%= product._id %>/1" class="btn btn-buy-now">Buy Now</a>
                                  </div>
                            </div>
                        </div>
                    </div>
                <% }) %>
              
    </div>
    <div class="pagination-controls pagination" id="pagination-controls">
      <% if (currentPage > 1) { %>
        <a href="?page=<%= currentPage - 1 %>" class="page-link  text-black rounded border-0">Previous</a>
      <% } %>

      <% for (let i = 1; i <= totalPages; i++) { %>
        <% if (i === currentPage) { %>
          <span class="current-page page-link active bg-black text-white rounded border-0"><%= i %></span>
        <% } else { %>
          <a href="?page=<%= i %>" class="page-link  text-black rounded border-0"><%= i %></a>
        <% } %>
      <% } %>

      <% if (currentPage < totalPages) { %>
        <a href="?page=<%= currentPage + 1 %>" class="page-link text-black rounded border-0">Next</a>
      <% } %>
    </div>
  <% } else{ %>
    <h1 style="text-align: center; padding: 150px;">NO PRODUCTS AVAILABLE</h1>
  <% } %>
</div>
</section>
  
  

  <footer class="footer">
    <div class="container">
      <div class="row">
        <div class="col-md-4">
          <h3 class="footer-heading">About Us</h3>
          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec orci orci, porta nec magna ac, placerat vestibulum ligula. Sed posuere consectetur est at lobortis.</p>
          <a href="#" class="btn btn-outline-light">Learn More</a>
        </div>
        <div class="col-md-4">
          <h3 class="footer-heading">Information</h3>
          <ul class="list-unstyled">
            <li><a href="#">Help Center</a></li>
            <li><a href="#">Privacy Policy</a></li>
            <li><a href="#">Terms & Conditions</a></li>
            <li><a href="#">Contact Us</a></li>
          </ul>
        </div>
        <div class="col-md-4">
          <h3 class="footer-heading">Newsletter</h3>
          <p>Subscribe to our newsletter to receive updates on new products and promotions.</p>
          <form action="#" method="POST" class="d-flex">
            <input type="email" class="form-control" placeholder="Enter Email Address">
            <button type="submit" class="btn btn-primary">Subscribe</button>
          </form>
        </div>
      </div>
      <div class="row mt-5">
        <div class="col">
          <p class="text-center text-muted">© 2024 Brand Name. All Rights Reserved.</p>
        </div>
        <div class="col d-flex justify-content-end">
          <a href="#" class="social-link"><i class="fab fa-facebook"></i>fb</a>
          <a href="#" class="social-link"><i class="fab fa-twitter"></i>tw</a>
          <a href="#" class="social-link"><i class="fab fa-instagram"></i>in</a>
        </div>
      </div>
    </div>
  </footer>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    (function () {
        window.onpageshow = function (event) {
          if (event.persisted || (window.performance && window.performance.navigation.type === 2)) {
            window.location.reload();
          }
        };
      })();
  </script>
  <script>
      const addToCartButtons = document.querySelectorAll('.add-to-cart');
      addToCartButtons.forEach(button => {
        button.addEventListener('click', (event) => {
          event.preventDefault();
          const item = event.target.closest('.product-card');
          if (item.classList.contains('out-of-stock')) {
            Swal.fire('Out of Stock', 'This product is currently out of stock.', 'warning');
            return;
          }
          const quantity = 1;
          const productId = button.dataset.productId;
          const productName = button.closest('.product-card').querySelector('.product-name').textContent;
    
          fetch('/add-to-cart', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              productId,
              quantity,
            })
          })
          .then(response => {
            if (!response.ok) {
              return response.json().then(data => {
                if (data.error === 'Not enough stock available') {
                  Swal.fire('Oops!', `Only ${data.availableStock} items are available in stock for this product.`, 'warning');
                } else if( !data.success) {
                  window.location.href = '/login?message=please login to add items to cart';
                } else {
                  throw new Error('Network response was not ok');
                }
              });
            }
            return response.json();
          })
          .then(data => {
            if (data) {
              Swal.fire('Success!', `${quantity} x ${productName} added to cart!`, 'success');
            } else {
              console.error('Error adding product to cart:', data.error);
            }
          })
          .catch(error => {
            console.error('Error adding product to cart:', error);
          });
        });
      });
  </script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.move-to-wishlist').forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const item = e.target.closest('.product-card');
            const productId = item.getAttribute('data-product');
            console.log(item+"toggle lost")
            
            fetch('/toggle-wishlist', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ productId: productId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                       const icon = item.querySelector('.fa-heart');
                            if (data.isInWishlist) {
                                icon.style.color = 'black';
                            } else {
                              icon.style.color = 'rgb(221, 218, 218)';
                        }
                } else {
                  console.log(data.success+"aano")
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message,
                        confirmButtonText: 'OK'
                    });
                }
            });
        });
    });
});
  </script>
  <script>
    function setCategory(category) {
      document.getElementById('selectedCategory').value = category;
      document.getElementById('categoryDropdown').querySelector('.dropdown-toggle-text').textContent = category.charAt(0).toUpperCase() + category.slice(1);
    }
  </script>
   <!-- <script>
    document.addEventListener('DOMContentLoaded', function() {
  const savedSort = localStorage.getItem('selectedSort');
  if (savedSort) {
    document.getElementById('sortBy').value = savedSort;
  }
});

document.querySelector('a[href="/"]').addEventListener('click', function() {
  localStorage.removeItem('selectedSort');
});
   const productDataDiv = document.getElementById('productData');
   const productDataString = productDataDiv.dataset.products;
   const wishlistDataDiv = document.getElementById('wishlistData');
   const productData = JSON.parse(productDataString);
   const wishlistProductsString = wishlistDataDiv.dataset.wishlistProducts;
   const wishlistProducts = JSON.parse(wishlistProductsString);
   const currentPage =  JSON.parse(productDataDiv.dataset.currentPage);
   const productsPerPage = JSON.parse(productDataDiv.dataset.productsPerPage);
   const totalProducts = JSON.parse(productDataDiv.dataset.totalProducts);
   console.log("totalproducts:",totalProducts);

   
   
   function sortByPrice(order) {
      return productData.sort((a, b) => {
        if (order === 'asc') {
          return a.price - b.price;
        } else {
          return b.price - a.price;
        }
      });
   }

   function sortByName(order) {
  return productData.sort((a, b) => {
    const nameA = a.name.toLowerCase();
    const nameB = b.name.toLowerCase();
    if (order === 'asc') {
      return nameA.localeCompare(nameB);
    } else {
      return nameB.localeCompare(nameA);
    }
  });
}

function sortByRating(order) {
  return productData.sort((a, b) => {
    if (a.averageRating === b.averageRating) {
      const nameA = a.name.toLowerCase();
      const nameB = b.name.toLowerCase();
      if (nameA < nameB) return -1;
      if (nameA > nameB) return 1;
      return 0;
    } else {
      if (order === 'asc') {
        return a.averageRating - b.averageRating;
      } else {
        return b.averageRating - a.averageRating;
      }
    }
  });
}

function sortByPopularity(order) {
  return productData.sort((a, b) => {
    if (order === 'desc') {
      return b.orderCount - a.orderCount;
    } else {
      return a.orderCount - b.orderCount;
    }
  });
}

function sortByNewArrivals() {
  return productData.sort((a, b) => {
    return new Date(b.createdAt) - new Date(a.createdAt);
  });
}

document.getElementById('sortBy').addEventListener('change', function() {
  const sortBy = this.value;
  let sortedProducts;
  localStorage.setItem('selectedSort', sortBy);

  // Update the URL with the new sort parameter
  const url = new URL(window.location);
  url.searchParams.set('sort', sortBy);
  window.history.pushState({}, '', url);

  switch (sortBy) {
    case 'popularity':
      sortedProducts = sortByPopularity('desc');
      break;
    case 'priceLowToHigh':
      sortedProducts = sortByPrice('asc');
      break;
    case 'priceHighToLow':
      sortedProducts = sortByPrice('desc');
      break;
    case 'newArrival':
      sortedProducts = sortByNewArrivals();
      break;
    case 'aToZ':
      sortedProducts = sortByName('asc');
      break;
    case 'zToA':
      sortedProducts = sortByName('desc');
      break;
    case 'ratingHighToLow':
      sortedProducts = sortByRating('desc'); 
      break;
    case 'ratingLowToHigh':
      sortedProducts = sortByRating('asc'); 
      break;
    
    default:
      sortedProducts = productData;
  }

  updateProductList(sortedProducts, currentPage, productsPerPage, sortedProducts.length);
});



function updateProductList(products, currentPage, productsPerPage, totalProducts) {
  const productSection = document.querySelector('.product-section .row');
  productSection.innerHTML = '';

  if (products.length === 0) {
    productSection.innerHTML = '<h1 style="text-align: center; padding: 150px;">NO PRODUCTS AVAILABLE</h1>';
    return;
  }
  const totalSortedProducts = products.length;
  const totalPages = Math.ceil(totalSortedProducts / productsPerPage);
  const startIndex = (currentPage - 1) * productsPerPage;
  const endIndex = Math.min(startIndex + productsPerPage, totalSortedProducts);
  const paginatedProducts = products.slice(startIndex, endIndex);

  console.log("updtlist:",totalSortedProducts,totalPages,startIndex,endIndex,paginatedProducts);

  paginatedProducts.forEach(product => {
    const wishlistIconColor = product.isInWishlist ? 'black' : 'rgb(221, 218, 218)';
    function generateRatingHtml(rating) {
      let ratingHtml = '';
      for (let i = 1; i <= 5; i++) {
        if (i <= rating) {
          ratingHtml += '<i class="fas fa-star"></i>';
        } else {
          ratingHtml += '<i class="far fa-star"></i>';
        }
      }
      return ratingHtml;
    }

    const pagination = `<div class="pagination-controls" id="pagination-controls"></div>`

    const priceHtml = product.currentPrice !== undefined && product.currentPrice !== product.price
      ? `<div class="product-price">
           <span class="price" style="text-decoration: line-through;">₹${product.price.toFixed(2)}</span>
           <span class="current-price">₹${product.currentPrice.toFixed(2)}</span>
           <i class="fas fa-info-circle offer-icon" data-bs-toggle="modal" data-bs-target="#offerModal-${product.id}"></i>
         </div>`
      : `<div class="product-price">₹${product.price.toFixed(2)}</div>`;

    const productCard = `
      <div class="col-lg-3 col-md-6 col-sm-12">
        <div class="product-card" data-product="${product.id}">
          <div class="product-image">
            <a href="/product-details/${product.id}">
              <img src="/uploads/${product.photos[0].filename}" alt="Product Image">
            </a>
            <div class="product-wishlist">
              <a href="#" class="move-to-wishlist">
                <i class="fa fa-heart" style="color: ${wishlistIconColor};"></i>
              </a>
            </div>
          </div>
          <div class="product-details">
            <h3 class="product-name">${product.name}</h3>
            <div class="product-rating">
              ${generateRatingHtml(product.averageRating)}
            </div>
             ${priceHtml}
            <div class="product-actions">
              <a href="#" class="btn btn-add-to-cart add-to-cart" data-product-id="${product.id}">Add to Cart</a>
              <a href="/checkout?product=${product.id}" class="btn btn-buy-now">Buy Now</a>
            </div>
          </div>
        </div>
      </div>   
    `;
    
    productSection.insertAdjacentHTML('beforeend', productCard);
  });
  const addToCartButtons = document.querySelectorAll('.add-to-cart');
    
    addToCartButtons.forEach(button => {
      button.addEventListener('click', (event) => {
        event.preventDefault();
        const quantity = 1;
        const productId = button.dataset.productId;
        console.log(productId+"addtocart")
        const productName = button.closest('.product-card').querySelector('.product-name').textContent;
  
        fetch('/add-to-cart', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            productId,
            quantity,
          })
        })
        .then(response => {
          if (!response.ok) {
            return response.json().then(data => {
              if (data.error === 'Not enough stock available') {
                Swal.fire('Oops!', `Only ${data.availableStock} items are available in stock for this product.`, 'warning');
              } else {
                throw new Error('Network response was not ok');
              }
            });
          }
          return response.json();
        })
        .then(data => {
          if (data) {
            Swal.fire('Success!', `${quantity} x ${productName} added to cart!`, 'success');
          } else {
            console.error('Error adding product to cart:', data.error);
          }
        })
        .catch(error => {
          console.error('Error adding product to cart:', error);
        });
      });
    });
  
  document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.move-to-wishlist').forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const item = e.target.closest('.product-card');
            const productId = item.getAttribute('data-product');
            
            fetch('/toggle-wishlist', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ productId: productId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                       const icon = item.querySelector('.fa-heart');
                            if (data.isInWishlist) {
                                icon.style.color = 'black';
                            } else {
                              icon.style.color = 'rgb(221, 218, 218)';
                        }
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message,
                        confirmButtonText: 'OK'
                    });
                }
            });
        });
    });
});
updatePaginationControls(currentPage, totalPages);
}
function updatePaginationControls(currentPage, totalPages) {
  const paginationControls = document.getElementById('pagination-controls');
  paginationControls.innerHTML = '';

  const currentSort = document.getElementById('sortBy').value;

  for (let i = 1; i <= totalPages; i++) {
  const link = document.createElement('a');

  if (i === 1 && currentPage === 1) {
    link.classList.add('disabled'); 
  } else if (i === 1) {
    link.href = `?page=1&sort=${currentSort}`;
    link.textContent = 'First';
  } else if (i === totalPages && currentPage === totalPages) { 
    link.classList.add('disabled'); 
  } else if (i === totalPages) { 
    link.href = `?page=${totalPages}&sort=${currentSort}`;
    link.textContent = 'Last';
  } else {
    link.href = `?page=${i}&sort=${currentSort}`;
    link.textContent = i;
  }

  link.classList.add('page-link');
  if (i === currentPage) {
    link.classList.add('current-page');
  }
  paginationControls.appendChild(link);
}

  document.querySelectorAll('.page-link').forEach(link => {
    link.addEventListener('click', (event) => {
      event.preventDefault();
      const url = new URL(event.target.href);
      const page = url.searchParams.get('page');
      const sort = url.searchParams.get('sort');
      if (page && sort) {
        updateProductList(productData, parseInt(page, 10), productsPerPage, totalProducts);
        document.getElementById('sortBy').value = sort;
      }
    });
  });
}
  </script> -->
  
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
</body>
</html>